---
import { Globe, ChevronDown } from "@lucide/astro"

interface Props {
    currentLocale: string
    idPrefix?: string
}

const { currentLocale, idPrefix = '' } = Astro.props
const selectId = `${idPrefix}language`

const languages = [
    { value: "en", label: "Eng" },
    { value: "es", label: "Esp" },
]
---
<div class="flex flex-row items-center justify-center gap-2 language-select-group">
<Globe class="w-5 h-5" />
<div class="relative inline-block">
    <select name="language" id={selectId} class="w-15 h-auto text-lg bg-transparent font-semibold border-none outline-none cursor-pointer language-select pr-2 pl-0">
        {languages.map((lang) => (
            <option value={lang.value} selected={lang.value === currentLocale}>
                {lang.label}
            </option>
        ))}
    </select>
    <ChevronDown class="w-4 h-4 absolute right-1 top-1/2 -translate-y-1/2 pointer-events-none" />
</div>
</div>

<style>
    .language-select {
        appearance: none !important;
        -webkit-appearance: none !important;
        -moz-appearance: none !important;
        background-image: none !important;
        background-color: transparent !important;
    }
    
    .language-select::-ms-expand {
        display: none;
    }
    
    .language-select:focus {
        outline: 2px solid oklch(var(--secondary));
        outline-offset: 2px;
    }
</style>

<script>
    import { actions } from 'astro:actions'
    
    // Use class selector to get all language selects
    const languageSelects = document.querySelectorAll('.language-select') as NodeListOf<HTMLSelectElement>
    
    // Add event listener to each select
    languageSelects.forEach(select => {
        select.addEventListener('change', async (event) => {
            const newLocale = (event.target as HTMLSelectElement).value
            const currentPath = window.location.pathname
            
            // Calculate new URL based on locale
            let newPath: string
            
            // Remove any existing locale prefix (/en/ or /es/)
            const pathWithoutLocale = currentPath.replace(/^\/(en|es)(\/|$)/, '/')
            
            if (newLocale === 'en') {
                // Add /en/ prefix
                newPath = pathWithoutLocale === '/' ? '/en/' : `/en${pathWithoutLocale}`
            } else if (newLocale === 'es') {
                // Add /es/ prefix
                newPath = pathWithoutLocale === '/' ? '/es/' : `/es${pathWithoutLocale}`
            } else {
                newPath = currentPath
            }
            
            // Update session storage
            try {
                const { data, error } = await actions.setLocale(newLocale)
                if (error) {
                    console.error('Error setting locale:', error)
                }
            } catch (error) {
                console.error('Error in setLocale action:', error)
            }
            
            // Navigate to new URL (single navigation)
            window.location.href = newPath
        })
    })
</script>




