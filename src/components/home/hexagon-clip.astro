---
// Component props (optional)
const { 
  delay = "0s",
  top = "200px",
  left = "50%",
  right = "auto",
  bottom = "auto",
  position = "absolute",
  transform = "translateX(-50%)",
  width = "160px",
  height = "160px"
} = Astro.props;
---

<div class="hexagon-container bg-primary">
  <svg class="hexagon-mask" viewBox="0 0 160 160" xmlns="http://www.w3.org/2000/svg">
    <defs>
      <clipPath id="hexClip">
        <path 
          d="M159.5 40.3086V119.69L80 159.44L0.5 119.69V40.3086L80 0.558594L159.5 40.3086Z"
          class="hex-shape"
        />
      </clipPath>
    </defs>
  </svg>
  
  <div class="hexagon-content">
    <slot/>
  </div>
</div>

<style define:vars={{ delay, top, left, right, bottom, position, transform, width, height }}>
  .hexagon-container {
    position: relative;
    width: 100%;
    height: 100%;
    
  }

  .hexagon-mask {
    position: var(--position);
    top: var(--top);
    left: var(--left);
    right: var(--right);
    bottom: var(--bottom);
    transform: var(--transform);
    width: var(--width);
    height: var(--height);
    pointer-events: none;
  }

  .hex-shape {
    transform-origin: 80px 80px;
    transform: scale(1);
    
    animation: hexGrow 5s ease-in-out infinite alternate-reverse;
    animation-delay: var(--delay);
  }

  .hexagon-content {
    clip-path: url(#hexClip);
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    animation: fadeIn 0.6s ease-out forwards;
    animation-delay: calc(var(--delay) + 0.4s);
  }

  @keyframes hexGrow {
    0% {
      transform: scale(1) rotate(0deg);
    }
    100% {
      transform: scale(10000%);
    }
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

</style>