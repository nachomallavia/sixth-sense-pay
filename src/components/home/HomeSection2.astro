---
const {currentLocale} =    Astro.props
import HomeSection2aImage from "@/assets/home-section-2-a.png"
import HomeSection2bImage from "@/assets/home-section-2-b.png"
import HomeSection2cImage from "@/assets/home-section-2-c.png"
import HomeSection2dImage from "@/assets/home-section-2-d.png"
import Button from "@/components/starwind/button"
const localesContent = {
    "en":{
       slide1: "Buy tokens with fiat or crypto.<br>Onramping and Offramping of Stablecoins.",
       slide2: "Instant withdrawals to bank accounts.",
       slide3: "DEFI wallet infrastructure.",
       slide4: "Support for USDT and USDC (ERC-20 / TRC-20).",
    },
    "es":{
        slide1: "Compra de tokens con fiat o cripto.<br>Onramping y Offramping de Stablecoins.",

        slide2: "Retiros instant√°neos<br> a cuentas bancarias.",
        slide3: "Infraestructura <br>de billetera DEFI.",
        slide4: "Soporte para USDT y USDC<br>(ERC-20 / TRC-20).",
        
        
        
    }
}

const content = localesContent[currentLocale as keyof typeof localesContent]
---

<section id="home-section-2" class="relative w-full h-[calc((100vh-5rem)*4)] lg:h-[calc((100vh-4rem)*4)] border-t-1 border-foreground border-b-1 bg-secondary">
    <div class="sticky top-20 lg:top-16 h-[calc(100vh-5rem)] lg:h-[calc(100vh-4rem)] flex flex-col lg:flex-row items-center justify-center w-full mx-auto">

        <div class="left-section h-full w-full lg:w-1/2 flex flex-col gap-0 overflow-y-scroll no-scrollbar [&::-webkit-scrollbar]:hidden [&::-webkit-scrollbar-track]:hidden [&::-webkit-scrollbar-thumb]:hidden [&::-webkit-scrollbar-thumb:hover]:hidden border-r-1 border-foreground snap-y snap-mandatory">
            <div class="flex items-center justify-center h-[calc(100vh-5rem)] lg:h-[calc(100vh-4rem)] min-h-full bg-accent snap-start snap-always" data-slide="1">
                <img src={HomeSection2aImage.src} alt="Sixth Sense Pay" class="w-full" />
            </div>
            <div class="flex items-center justify-center w-full h-[calc(100vh-5rem)] lg:h-[calc(100vh-4rem)] min-h-full bg-primary snap-start snap-always" data-slide="2">
                 <img src={HomeSection2bImage.src} alt="Sixth Sense Pay" class="w-full" />
            </div>
            <div class="flex items-center justify-center w-full h-[calc(100vh-5rem)] lg:h-[calc(100vh-4rem)] min-h-full bg-secondary snap-start snap-always" data-slide="3">
                <img src={HomeSection2cImage.src} alt="Sixth Sense Pay" class="w-full" />
            </div>
            <div class="flex items-center justify-center w-full h-[calc(100vh-5rem)] lg:h-[calc(100vh-4rem)] min-h-full bg-primary snap-start snap-always" data-slide="4">
                <img src={HomeSection2dImage.src} alt="Sixth Sense Pay" class="w-full" />
            </div>
        </div>

        <div class="right-section w-full lg:w-1/2 h-full relative top-1/2 -translate-y-1/2 flex flex-col items-center justify-center px-12">
            <div class="flex flex-col items-start justify-center gap-16 w-8/10 absolute top-1/2 -translate-y-1/2">
               <h2 class="text-2xl font-light cursor-pointer hover:opacity-80 transition-all duration-300 ease-in-out origin-left" set:html={content.slide1} data-slide-btn="1"></h2>
               <h2 class="text-2xl font-light cursor-pointer hover:opacity-80 transition-all duration-300 ease-in-out origin-left" set:html={content.slide2} data-slide-btn="2"></h2>
               <h2 class="text-2xl font-light cursor-pointer hover:opacity-80 transition-all duration-300 ease-in-out origin-left" set:html={content.slide3} data-slide-btn="3"></h2>
               <h2 class="text-2xl font-light cursor-pointer hover:opacity-80 transition-all duration-300 ease-in-out origin-left" set:html={content.slide4} data-slide-btn="4"></h2>
            </div>  
         
        </div>
    </div>
</section>

<script>
    const slideBtns = document.querySelectorAll('[data-slide-btn]');
    const slides = document.querySelectorAll('[data-slide]');
    const leftSection = document.querySelector('.left-section') as HTMLElement;
    const parentSection = document.querySelector('#home-section-2') as HTMLElement;

    // Click handler for text elements
    slideBtns.forEach(slideBtn => {
        slideBtn.addEventListener('click', () => {
            const slideNumber = slideBtn.getAttribute('data-slide-btn');
            const slide = document.querySelector(`[data-slide="${slideNumber}"]`);
            if (slide) {
                slide.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        });
    });

    // Function to update active text element
    function updateActiveText(slideNumber: string) {
        slideBtns.forEach(btn => {
            const btnNumber = btn.getAttribute('data-slide-btn');
            if (btnNumber === slideNumber) {
                // Active state - scale up and bold
                btn.classList.remove('font-light');
                btn.classList.add('font-bold');
                (btn as HTMLElement).style.transform = 'scale(1.25)';
            } else {
                // Inactive state - scale down and light
                btn.classList.remove('font-bold');
                btn.classList.add('font-light');
                (btn as HTMLElement).style.transform = 'scale(1)';
            }
        });
    }

    // Function to sync parent section scroll with left section scroll
    function syncParentScroll() {
        if (!leftSection || !parentSection) return;

        // Speed multiplier - higher values make parent scroll faster
        // 1.0 = 1:1 sync, 2.0 = parent scrolls twice as fast, etc.
        const speedFactor = 1.5;

        // Calculate scroll progress of left section (0 to 1)
        const scrollTop = leftSection.scrollTop;
        const scrollHeight = leftSection.scrollHeight - leftSection.clientHeight;
        let scrollProgress = scrollHeight > 0 ? scrollTop / scrollHeight : 0;

        // Apply speed factor and clamp to 0-1 range
        scrollProgress = Math.min(scrollProgress * speedFactor, 1);

        // Get parent section's position and height
        const parentRect = parentSection.getBoundingClientRect();
        const parentTop = parentSection.offsetTop;
        const parentHeight = parentSection.offsetHeight;
        const viewportHeight = window.innerHeight;

        // Calculate target scroll position for window
        // We want to scroll from the top of the section to the bottom
        const maxParentScroll = parentHeight - viewportHeight;
        const targetWindowScroll = parentTop + (maxParentScroll * scrollProgress);

        // Smoothly scroll the window to match
        window.scrollTo({
            top: targetWindowScroll,
            behavior: 'smooth'
        });
    }

    // Add scroll listener to left section
    let scrollTimeout: number;
    leftSection?.addEventListener('scroll', () => {
        // Debounce the sync to avoid too many calls
        clearTimeout(scrollTimeout);
        scrollTimeout = window.setTimeout(() => {
            syncParentScroll();
        }, 50);
    });

    // IntersectionObserver to detect which slide is in view
    const observerOptions = {
        root: leftSection,
        threshold: 0.5, // Trigger when 50% of the slide is visible
        rootMargin: '0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const slideNumber = entry.target.getAttribute('data-slide');
                if (slideNumber) {
                    updateActiveText(slideNumber);
                }
            }
        });
    }, observerOptions);

    // Observe all slides
    slides.forEach(slide => observer.observe(slide));

    // Set initial active state (slide 1)
    updateActiveText('1');
</script>